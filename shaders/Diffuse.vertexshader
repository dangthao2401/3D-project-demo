#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 vertexPosition_worldspace;
out vec3 vertexNormal_worldspace;
// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 ModelMatrix;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	// calculate the position of vertex in world space
	vertexPosition_worldspace = (ModelMatrix * vec4(vertexPosition_modelspace,1.0)).rgb;
	vertexNormal_worldspace = (ModelMatrix * vec4(vertexNormal_modelspace,0.0)).rgb; 
	// Normal and UV of the vertex. No special space for this one.
	UV = vertexUV;
		
}


