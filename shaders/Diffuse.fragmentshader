#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 vertexNormal_worldspace;
in vec3 vertexPosition_worldspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D TextureSampler1;
uniform sampler2D TextureSampler2;
uniform sampler2D TextureSampler3;
uniform sampler2D BlendingTexture;
uniform vec3 lightPos_worldspace;
uniform vec3 viewPos_worldspace;

void main(){

    vec3 lightColor = vec3(1., 1., 1.);
	vec3 objectColor = vec3(1.0, 0.5, 0.3);
	float ambientStrenght = 0.1;
	vec3 ambientLight = ambientStrenght*lightColor;
	float specularStrength = 0.5f;
    vec3 norm = normalize(vertexNormal_worldspace);
    vec3 lightDirection = normalize(lightPos_worldspace - vertexPosition_worldspace);
	vec3 viewDirection = normalize(viewPos_worldspace -vertexPosition_worldspace);
    float diffuse = max(dot(norm, lightDirection), 0);
    vec3 diffuseLight = diffuse * lightColor;
	vec3 reflectDirection = reflect(-lightDirection, norm);
	float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), 32);
	vec3 specularLight = specularStrength*spec*lightColor;

	//color = specularLight*objectColor ;
    color = diffuseLight*objectColor + ambientLight*objectColor + specularLight*objectColor ;

    

	// Output color = color of the texture at the specified UV
	// vec3 grassColor = texture( TextureSampler1, UV ).rgb;
	// vec3 dirtColor = texture( TextureSampler2, UV ).rgb;
	// vec3 rockColor = texture( TextureSampler3, UV ).rgb;
	// vec3 colorbend = texture( BlendingTexture, UV ).rgb;
	// vec3 lightColor = vec3(1., 1., 1.);
	// vec3 objectColor = vec3(1.0, 0.5, 0.3);
	// float dirtWeight = colorbend.r;
	// float grassWeight = colorbend.g;
	// float rockWeight = colorbend.b;
	// color = grassWeight*grassColor + dirtWeight*dirtColor + rockWeight*rockColor;

}