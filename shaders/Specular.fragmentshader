#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 vertexNormal_worldspace;
in vec3 vertexPosition_worldspace;
// uniform
uniform vec3 lightPos_worldspace;
uniform vec3 ViewPos_worldspace;
// Ouput data
out vec3 color;
void main(){
	vec3 lightColor = vec3(1.0,1.0,1.0);
	vec3 objectColor = vec3(1.0, 0.5, 0.31);
	float specularStrength = 0.5;
	vec3 norm = normalize(vertexNormal_worldspace);
	// calculate the light direction 
	vec3 lightDirection = normalize(lightPos_worldspace - vertexPosition_worldspace);
	// calculate view direction
	vec3 viewDir = normalize(ViewPos_worldspace - vertexPosition_worldspace);
	// calculate the diffuse
	float diffuse = max(dot(norm, lightDirection), 0.0);
	//
	vec3 reflectDir = reflect(-lightDirection, norm); 
	// calculate the diffuse color
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor; 
	
	color = specular* objectColor;
}



